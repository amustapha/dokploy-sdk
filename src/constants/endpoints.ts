/**
 * API endpoint constants
 * Centralized endpoint definitions for all API calls
 */

export const ENDPOINTS = {
  APPLICATION: {
    CREATE: '/application.create',
    ONE: '/application.one',
    RELOAD: '/application.reload',
    DELETE: '/application.delete',
    STOP: '/application.stop',
    START: '/application.start',
    REDEPLOY: '/application.redeploy',
    SAVE_ENVIRONMENT: '/application.saveEnvironment',
    DEPLOY: '/application.deploy',
    UPDATE: '/application.update',
    MARK_RUNNING: '/application.markRunning',
    SAVE_BUILD_TYPE: '/application.saveBuildType',
    SAVE_GITHUB_PROVIDER: '/application.saveGithubProvider',
    SAVE_GITLAB_PROVIDER: '/application.saveGitlabProvider',
    SAVE_BITBUCKET_PROVIDER: '/application.saveBitbucketProvider',
    SAVE_GITEA_PROVIDER: '/application.saveGiteaProvider',
    SAVE_GIT_PROVIDER: '/application.saveGitProdiver',
    SAVE_DOCKER_PROVIDER: '/application.saveDockerProvider',
    CANCEL_DEPLOYMENT: '/application.cancelDeployment',
    MOVE: '/application.move',
    CLEAN_QUEUES: '/application.cleanQueues',
    READ_APP_MONITORING: '/application.readAppMonitoring',
    READ_TRAEFIK_CONFIG: '/application.readTraefikConfig',
    UPDATE_TRAEFIK_CONFIG: '/application.updateTraefikConfig',
    REFRESH_TOKEN: '/application.refreshToken',
    DISCONNECT_GIT_PROVIDER: '/application.disconnectGitProvider',
  },
  POSTGRES: {
    CREATE: '/postgres.create',
    ONE: '/postgres.one',
    START: '/postgres.start',
    STOP: '/postgres.stop',
    SAVE_EXTERNAL_PORT: '/postgres.saveExternalPort',
    DEPLOY: '/postgres.deploy',
    CHANGE_STATUS: '/postgres.changeStatus',
    REMOVE: '/postgres.remove',
    SAVE_ENVIRONMENT: '/postgres.saveEnvironment',
    RELOAD: '/postgres.reload',
    UPDATE: '/postgres.update',
    MOVE: '/postgres.move',
    REBUILD: '/postgres.rebuild',
  },
  MYSQL: {
    CREATE: '/mysql.create',
    ONE: '/mysql.one',
    START: '/mysql.start',
    STOP: '/mysql.stop',
    SAVE_EXTERNAL_PORT: '/mysql.saveExternalPort',
    DEPLOY: '/mysql.deploy',
    CHANGE_STATUS: '/mysql.changeStatus',
    REMOVE: '/mysql.remove',
    SAVE_ENVIRONMENT: '/mysql.saveEnvironment',
    RELOAD: '/mysql.reload',
    UPDATE: '/mysql.update',
    MOVE: '/mysql.move',
    REBUILD: '/mysql.rebuild',
  },
  MARIADB: {
    CREATE: '/mariadb.create',
    ONE: '/mariadb.one',
    START: '/mariadb.start',
    STOP: '/mariadb.stop',
    SAVE_EXTERNAL_PORT: '/mariadb.saveExternalPort',
    DEPLOY: '/mariadb.deploy',
    CHANGE_STATUS: '/mariadb.changeStatus',
    REMOVE: '/mariadb.remove',
    SAVE_ENVIRONMENT: '/mariadb.saveEnvironment',
    RELOAD: '/mariadb.reload',
    UPDATE: '/mariadb.update',
    MOVE: '/mariadb.move',
    REBUILD: '/mariadb.rebuild',
  },
  MONGO: {
    CREATE: '/mongo.create',
    ONE: '/mongo.one',
    START: '/mongo.start',
    STOP: '/mongo.stop',
    SAVE_EXTERNAL_PORT: '/mongo.saveExternalPort',
    DEPLOY: '/mongo.deploy',
    CHANGE_STATUS: '/mongo.changeStatus',
    REMOVE: '/mongo.remove',
    SAVE_ENVIRONMENT: '/mongo.saveEnvironment',
    RELOAD: '/mongo.reload',
    UPDATE: '/mongo.update',
    MOVE: '/mongo.move',
    REBUILD: '/mongo.rebuild',
  },
  REDIS: {
    CREATE: '/redis.create',
    ONE: '/redis.one',
    START: '/redis.start',
    STOP: '/redis.stop',
    SAVE_EXTERNAL_PORT: '/redis.saveExternalPort',
    DEPLOY: '/redis.deploy',
    CHANGE_STATUS: '/redis.changeStatus',
    REMOVE: '/redis.remove',
    SAVE_ENVIRONMENT: '/redis.saveEnvironment',
    RELOAD: '/redis.reload',
    UPDATE: '/redis.update',
    MOVE: '/redis.move',
    REBUILD: '/redis.rebuild',
  },
  COMPOSE: {
    CREATE: '/compose.create',
    ONE: '/compose.one',
    UPDATE: '/compose.update',
    DELETE: '/compose.delete',
    DEPLOY: '/compose.deploy',
    STOP: '/compose.stop',
    START: '/compose.start',
    SAVE_ENVIRONMENT: '/compose.saveEnvironment',
  },
  DEPLOYMENT: {
    ONE: '/deployment.one',
  },
  DOCKER: {
    GET_CONTAINER_LOGS_BY_APP: '/docker.getContainerLogsByApp',
    CLEANUP_MONITORING: '/docker.cleanupMonitoring',
  },
  DOMAIN: {
    CREATE: '/domain.create',
    ONE: '/domain.one',
    BY_APPLICATION_ID: '/domain.byApplicationId',
    DELETE: '/domain.delete',
    UPDATE: '/domain.update',
    GENERATE_WILDCARD: '/domain.generateWildcard',
  },
  PROJECT: {
    CREATE: '/project.create',
    ALL: '/project.all',
    ONE: '/project.one',
    DELETE: '/project.delete',
    UPDATE: '/project.update',
    CLEAN_QUEUES: '/project.cleanQueues',
  },
  ADMIN: {
    CREATE_USER_INVITATION: '/admin.createUserInvitation',
    REMOVE_USER: '/admin.removeUser',
    GET_USER_BY_TOKEN: '/admin.getUserByToken',
    ASSIGN_PERMISSIONS: '/admin.assignPermissions',
    SETUP_MONITORING: '/admin.setupMonitoring',
  },
  AUTH: {
    LOGIN: '/auth.login',
    REGISTER: '/auth.register',
    LOGOUT: '/auth.logout',
  },
} as const;
